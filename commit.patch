diff --git a/.vscode/launch.json b/.vscode/launch.json
new file mode 100644
index 0000000..ebddcf5
--- /dev/null
+++ b/.vscode/launch.json
@@ -0,0 +1,18 @@
+{
+    "version": "0.2.0",
+    "configurations": [
+        {
+            "type": "gdb",
+            "request": "attach",
+            "name": "Attach to gdbserver",
+            "executable": "${workspaceRoot}/kernel/kernel",
+            "gdbpath": "gdb-multiarch",
+            "remote": true,            
+            "target": "127.0.0.1:26000",
+            "cwd": "${workspaceRoot}",
+            "setupCommands": {
+                "text": "source ${workspaceFolder}/.gdbinit"
+            }
+        }
+    ]
+}
\ No newline at end of file
diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..3051d5b
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,10 @@
+{
+    "python-envs.defaultEnvManager": "ms-python.python:conda",
+    "python-envs.defaultPackageManager": "ms-python.python:conda",
+    "python-envs.pythonProjects": [],
+    "files.associations": {
+        "user.h": "c",
+        "types.h": "c",
+        "stat.h": "c"
+    }
+}
\ No newline at end of file
diff --git a/Makefile b/Makefile
index b971308..1f68a81 100644
--- a/Makefile
+++ b/Makefile
@@ -157,6 +157,9 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_sleep\
+	$U/_pingpong\
+	$U/_find\
 
 
 ifeq ($(LAB),syscall)
@@ -242,15 +245,8 @@ qemu-gdb: $K/kernel .gdbinit fs.img
 	@echo "*** Now run 'gdb' in another window." 1>&2
 	$(QEMU) $(QEMUOPTS) -S $(QEMUGDB)
 
-GDBARGS = 
-GDBARGS += -ex 'set architecture riscv:rv64'
-GDBARGS += -ex 'target remote 127.0.0.1:$(GDBPORT)'
-GDBARGS += -ex 'symbol-file kernel/kernel'
-GDBARGS += -ex 'set riscv use-compressed-breakpoints yes'
-
-
 gdb: 
-	$(GDB) $(GDBARGS)
+	$(GDB)
 
 ##
 ##  FOR testing lab grading script
diff --git a/commands.gdb b/commands.gdb
new file mode 100644
index 0000000..789f688
--- /dev/null
+++ b/commands.gdb
@@ -0,0 +1,7 @@
+b usertrap
+b trap.c:56
+c
+p cpus[$tp]->proc->name
+c
+p cpus[$tp]->proc->name
+da
\ No newline at end of file
diff --git a/user/find.c b/user/find.c
new file mode 100644
index 0000000..2cdc9cc
--- /dev/null
+++ b/user/find.c
@@ -0,0 +1,54 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user.h"
+#include "kernel/fs.h"
+
+char *name(char *path) {
+  char *p;
+
+  // Find first character after last slash.
+  for (p = path + strlen(path); p >= path && *p != '/'; p--)
+    ;
+  return p+1;
+}
+
+void find(char* path,char* target){
+    char buf[512], *p;
+    int fd;
+    struct dirent de;
+    struct stat st;
+    fd = open(path, 0);
+    fstat(fd,&st);
+    switch(st.type){
+        case T_FILE:
+            if(strcmp(name(path),target)==0){
+                printf("%s\n",path);
+                close(fd);
+                return ;
+            }break;
+        case T_DIR:
+            if(strcmp(name(path), target) == 0) {
+                printf("%s\n", path);
+            } 
+            strcpy(buf, path);
+            p = buf + strlen(buf);
+            *p++ = '/';
+            while (read(fd, &de, sizeof(de)) == sizeof(de)){
+                if (de.inum == 0) continue;
+                if(strcmp(de.name, ".") == 0 || strcmp(de.name, "..") == 0) continue;
+                int len = 0;
+                while(len < DIRSIZ && de.name[len] != '\0') len++;
+                memmove(p, de.name, len);
+                p[len] = 0;
+                find(buf,target);
+            }break; 
+    }
+    close(fd);
+}
+
+int main(int argc,char* argv[]){
+    char* dir_name = argv[1];
+    char* target = argv[2];
+    find(dir_name,target);
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/pingpong.c b/user/pingpong.c
new file mode 100644
index 0000000..e5f3ba7
--- /dev/null
+++ b/user/pingpong.c
@@ -0,0 +1,38 @@
+#include "kernel/types.h"
+#include "user.h"
+
+int main(int argc, char* argv[]) {
+    int c2p[2], p2c[2];
+    int parent_pid, child_pid;
+    pipe(c2p);
+    pipe(p2c);
+
+    if (fork() == 0) {
+        int c_pid = getpid();
+        close(p2c[1]); 
+        close(c2p[0]); 
+
+        read(p2c[0], &parent_pid, sizeof(parent_pid));
+        write(c2p[1], &c_pid, sizeof(c_pid));
+        printf("%d: received ping from pid %d\n", getpid(), parent_pid);
+
+        close(p2c[0]);
+        close(c2p[1]);
+        exit(0);
+    } 
+    else {
+        int p_pid = getpid();
+        close(p2c[0]); 
+        close(c2p[1]); 
+
+        write(p2c[1], &p_pid, sizeof(p_pid));
+        read(c2p[0], &child_pid, sizeof(child_pid));
+        wait(0);
+        printf("%d: received pong from pid %d\n", getpid(), child_pid);
+
+        close(p2c[1]);
+        close(c2p[0]);
+        
+    }
+    exit(0);
+}
diff --git a/user/sleep.c b/user/sleep.c
new file mode 100644
index 0000000..36659d9
--- /dev/null
+++ b/user/sleep.c
@@ -0,0 +1,14 @@
+#include "kernel/types.h"
+#include "user.h"
+
+int main(int argc,char* argv[]){
+    if(argc != 2){
+        printf("Sleep needs one argument!\n");
+        exit(-1);
+    }
+    int ticks = atoi(argv[1]);
+    sleep(ticks);
+    printf("(nothing happens for a little while)\n");
+    exit(0);
+}
+
